# Autogenerated using ProtoBuf.jl v1.0.7 on 2022-10-08T23:44:39.019
# original file: /Users/arhik/October2022/IPFS.jl/src/ipld.proto (proto2 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using EnumX: @enumx

export PBLink, PBNode

struct PBLink
    Hash::Vector{UInt8}
    Name::String
    Tsize::UInt64
end
PB.default_values(::Type{PBLink}) = (;Hash = UInt8[], Name = "", Tsize = zero(UInt64))
PB.field_numbers(::Type{PBLink}) = (;Hash = 1, Name = 2, Tsize = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:PBLink})
    Hash = UInt8[]
    Name = ""
    Tsize = zero(UInt64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            Hash = PB.decode(d, Vector{UInt8})
        elseif field_number == 2
            Name = PB.decode(d, String)
        elseif field_number == 3
            Tsize = PB.decode(d, UInt64)
        else
            PB.skip(d, wire_type)
        end
    end
    return PBLink(Hash, Name, Tsize)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::PBLink)
    initpos = position(e.io)
    !isempty(x.Hash) && PB.encode(e, 1, x.Hash)
    !isempty(x.Name) && PB.encode(e, 2, x.Name)
    x.Tsize != zero(UInt64) && PB.encode(e, 3, x.Tsize)
    return position(e.io) - initpos
end
function PB._encoded_size(x::PBLink)
    encoded_size = 0
    !isempty(x.Hash) && (encoded_size += PB._encoded_size(x.Hash, 1))
    !isempty(x.Name) && (encoded_size += PB._encoded_size(x.Name, 2))
    x.Tsize != zero(UInt64) && (encoded_size += PB._encoded_size(x.Tsize, 3))
    return encoded_size
end

struct PBNode
    Links::Vector{PBLink}
    Data::Vector{UInt8}
end
PB.default_values(::Type{PBNode}) = (;Links = Vector{PBLink}(), Data = UInt8[])
PB.field_numbers(::Type{PBNode}) = (;Links = 2, Data = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:PBNode})
    Links = PB.BufferedVector{PBLink}()
    Data = UInt8[]
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 2
            PB.decode!(d, Links)
        elseif field_number == 1
            Data = PB.decode(d, Vector{UInt8})
        else
            PB.skip(d, wire_type)
        end
    end
    return PBNode(Links[], Data)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::PBNode)
    initpos = position(e.io)
    !isempty(x.Links) && PB.encode(e, 2, x.Links)
    !isempty(x.Data) && PB.encode(e, 1, x.Data)
    return position(e.io) - initpos
end
function PB._encoded_size(x::PBNode)
    encoded_size = 0
    !isempty(x.Links) && (encoded_size += PB._encoded_size(x.Links, 2))
    !isempty(x.Data) && (encoded_size += PB._encoded_size(x.Data, 1))
    return encoded_size
end
